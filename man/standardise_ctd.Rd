% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/standardise_ctd.R
\name{standardise_ctd}
\alias{standardise_ctd}
\title{Convert a CellTypeDataset into standardized format}
\usage{
standardise_ctd(
  ctd,
  dataset,
  input_species = NULL,
  output_species = "human",
  non121_strategy = "drop_both_species",
  method = "homologene",
  force_new_quantiles = TRUE,
  force_standardise = FALSE,
  remove_unlabeled_clusters = FALSE,
  numberOfBins = 40,
  keep_annot = TRUE,
  keep_plots = TRUE,
  as_sparse = TRUE,
  as_DelayedArray = FALSE,
  rename_columns = TRUE,
  make_columns_unique = FALSE,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{ctd}{Input CellTypeData.}

\item{dataset}{CellTypeData. name.}

\item{input_species}{Which species the gene names in \code{exp} come from.
See \link[EWCE]{list_species} for all available species.}

\item{output_species}{Which species' genes names to convert \code{exp} to.
See \link[EWCE]{list_species} for all available species.}

\item{non121_strategy}{How to handle genes that don't have
1:1 mappings between \code{input_species}:\code{output_species}.
Options include:\cr
\itemize{
\item{\code{"drop_both_species" or "dbs" or 1} : \cr}{
Drop genes that have duplicate
mappings in either the \code{input_species} or \code{output_species} \cr
(\emph{DEFAULT}).}
\item{\code{"drop_input_species" or "dis" or 2} : \cr}{
Only drop genes that have duplicate
mappings in the \code{input_species}.}
\item{\code{"drop_output_species" or "dos" or 3} : \cr}{
Only drop genes that have duplicate
mappings in the \code{output_species}.}
\item{\code{"keep_both_species" or "kbs" or 4} : \cr}{
Keep all genes regardless of whether
they have duplicate mappings in either species.}
\item{\code{"keep_popular" or "kp" or 5} : \cr}{
Return only the most "popular" interspecies ortholog mappings.
 This procedure tends to yield a greater number of returned genes
 but at the cost of many of them not being true biological 1:1 orthologs.}
 \item{\code{"sum","mean","median","min" or "max"} : \cr}{
 When \code{gene_df} is a matrix and \code{gene_output="rownames"},
  these options will aggregate many-to-one gene mappings
  (\code{input_species}-to-\code{output_species})
  after dropping any duplicate genes in the \code{output_species}.
 }
}}

\item{method}{R package to to use for gene mapping:
\itemize{
\item{\code{"gprofiler"} : Slower but more species and genes.}
\item{\code{"homologene"} : Faster but fewer species and genes.}
\item{\code{"babelgene"} : Faster but fewer species and genes.
Also gives consensus scores for each gene mapping based on a
 several different data sources.}
}}

\item{force_new_quantiles}{By default, quantile computation is
skipped if they have already been computed.
Set \code{=TRUE} to override this and generate new quantiles.}

\item{force_standardise}{If \code{ctd} has already been standardised, whether
to rerun standardisation anyway (Default: \code{FALSE}).}

\item{remove_unlabeled_clusters}{Remove any samples that have
numeric column names.}

\item{numberOfBins}{Number of non-zero quantile bins.}

\item{keep_annot}{Keep the column annotation data if provided.}

\item{keep_plots}{Keep the dendrograms if provided.}

\item{as_sparse}{Convert to sparse matrix.}

\item{as_DelayedArray}{Convert to \code{DelayedArray}.}

\item{rename_columns}{Remove \code{replace_chars} from column names.}

\item{make_columns_unique}{Rename each columns with the prefix
\code{dataset.species.celltype}.}

\item{verbose}{Print messages.
Set \code{verbose=2} if you want to print all messages
 from internal functions as well.}

\item{...}{
  Arguments passed on to \code{\link[orthogene:convert_orthologs]{orthogene::convert_orthologs}}
  \describe{
    \item{\code{gene_df}}{Data object containing the genes
(see \code{gene_input} for options on how
the genes can be stored within the object).\cr
Can be one of the following formats:\cr
\itemize{
\item{\code{matrix} : \cr}{A sparse or dense matrix.}
\item{\code{data.frame} : \cr}{A \code{data.frame},
 \code{data.table}. or \code{tibble}.}
\item{code{list} : \cr}{A \code{list} or character \code{vector}.}
}
Genes, transcripts, proteins, SNPs, or genomic ranges
 can be provided in any format
(HGNC, Ensembl, RefSeq, UniProt, etc.) and will be
automatically converted to gene symbols unless
specified otherwise with the \code{...} arguments.\cr
\emph{Note}: If you set \code{method="homologene"}, you
must either supply genes in gene symbol format (e.g. "Sox2")
 OR set \code{standardise_genes=TRUE}.}
    \item{\code{gene_input}}{Which aspect of \code{gene_df} to
get gene names from:\cr
\itemize{
\item{\code{"rownames"} : \cr}{From row names of data.frame/matrix.}
\item{\code{"colnames"} : \cr}{From column names of data.frame/matrix.}
\item{\code{<column name>} : \cr}{From a column in \code{gene_df},
 e.g. \code{"gene_names"}.}
}}
    \item{\code{gene_output}}{How to return genes.
Options include:\cr
\itemize{
\item{\code{"rownames"} : \cr}{As row names of \code{gene_df}.}
\item{\code{"colnames"} : \cr}{As column names of \code{gene_df}.}
\item{\code{"columns"} : \cr}{As new columns "input_gene", "ortholog_gene"
(and "input_gene_standard" if \code{standardise_genes=TRUE})
in \code{gene_df}.}
\item{\code{"dict"} : \cr}{As a dictionary (named list) where the names
are input_gene and the values are ortholog_gene}.
\item{\code{"dict_rev"} : \cr}{As a reversed dictionary (named list)
where the names are ortholog_gene and the values are input_gene}.
}}
    \item{\code{standardise_genes}}{If \code{TRUE} AND
\code{gene_output="columns"}, a new column "input_gene_standard"
will be added to \code{gene_df} containing standardised HGNC symbols
identified by \link[gprofiler2]{gorth}.}
    \item{\code{drop_nonorths}}{Drop genes that don't have an ortholog
in the \code{output_species}.}
    \item{\code{mthreshold}}{Maximum number of ortholog names per gene to show.
Passed to \link[gprofiler2]{gorth}.
Only used when \code{method="gprofiler"} (\emph{DEFAULT : }\code{Inf}).}
    \item{\code{sort_rows}}{Sort \code{gene_df} rows alphanumerically.}
  }}
}
\value{
Standardised CellTypeDataset.
}
\description{
This function will take a CTD,
drop all genes without 1:1 orthologs with the
\code{output_species} ("human" by default),
convert the remaining genes to gene symbols,
assign names to each level,
and convert all matrices to sparse matrices and/or \code{DelayedArray}.
}
\examples{
ctd <- ewceData::ctd()
ctd_std <- EWCE::standardise_ctd(
    ctd = ctd,
    input_species = "mouse",
    dataset = "Zeisel2016"
)
}
